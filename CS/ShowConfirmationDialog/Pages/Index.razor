@page "/"

@using ShowConfirmationDialog.Data
@inject WeatherForecastService ForecastService

<DxGrid @ref="Grid" Data="Forecasts"
        EditMode="GridEditMode.EditRow"
        EditModelSaving="Grid_EditModelSaving"
        CssClass="mw-1100">
    <Columns>
        <DxGridCommandColumn NewButtonVisible="false" DeleteButtonVisible="false">
            <CellDisplayTemplate>
                <DxButton Click="() => GridEditButton_Click(context)" Text="Edit" RenderStyle="ButtonRenderStyle.Link" />
            </CellDisplayTemplate>
        </DxGridCommandColumn>
        <DxGridDataColumn Caption="Date" FieldName="Date">
            <CellEditTemplate>
                @{
                    GridEditContext = context.EditContext;
                }
                <DxDateEdit @bind-Date="((WeatherForecast)context.EditModel).Date" />
            </CellEditTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn Caption="Temperature (C)" FieldName="TemperatureC">
            <CellEditTemplate>
                @{
                    GridEditContext = context.EditContext;
                }
                <DxSpinEdit @bind-Value="((WeatherForecast)context.EditModel).TemperatureC" />
            </CellEditTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

<DxPopup Visible="IsPopupVisible" HeaderText="Warning" ShowCloseButton="true" ShowFooter="true" CloseButtonClick="Popup_CloseButtonClick">
    <BodyContentTemplate>
        Your data is modified. Do you want to save the changes?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="dialog-button" RenderStyle="ButtonRenderStyle.Primary" Text="Yes" Click="ButtonYes_Click" />
        <DxButton CssClass="dialog-button" RenderStyle="ButtonRenderStyle.Secondary" Text="No" Click="ButtonNo_Click" />
    </FooterContentTemplate>
</DxPopup>

@code {
    List<WeatherForecast> Forecasts { get; set; }
    IGrid Grid { get; set; }
        
    EditContext _gridEditContext;
    EditContext GridEditContext {
        get { return Grid.IsEditing() ? _gridEditContext : null; }
        set { _gridEditContext = value; }
    }
        
    object SavedDataItem { get; set; }
    bool IsPopupVisible { get; set; }
        
    protected override async Task OnInitializedAsync() {
        Forecasts = await ForecastService.GetForecastAsync(DateTime.Now.AddDays(-2));
    }
        
    async Task GridEditButton_Click(GridColumnCellDisplayTemplateContext context) {
        if(context.Grid.IsEditing() && GridEditContext.IsModified()) {
            SavedDataItem = context.DataItem;
            IsPopupVisible = true;
        } else
            await context.Grid.StartEditDataItemAsync(context.DataItem);
    }
        
    void Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
        var dataItem = (WeatherForecast)e.DataItem;
        var editModel = (WeatherForecast)e.EditModel;
        dataItem.Date = editModel.Date;
        dataItem.TemperatureC = editModel.TemperatureC;
    }
        
    async Task ButtonYes_Click() {
        await Grid.SaveChangesAsync();
        await StartEditSavedItem();
    }
        
    async Task ButtonNo_Click() {
        await StartEditSavedItem();
    }
        
    async Task Popup_CloseButtonClick() {
        await StartEditSavedItem();
    }
        
    async Task StartEditSavedItem() {
        IsPopupVisible = false;
        await Grid.StartEditDataItemAsync(SavedDataItem);
        SavedDataItem = null;
    }
}
